<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AbusedDoublePressedFire" xml:space="preserve">
    <value>Don't tap a flaming Fire Element a second time! It burns...</value>
  </data>
  <data name="AbusedNoMoreFireForWater" xml:space="preserve">
    <value>There is no more Fire to evaporate the remaining Element!</value>
  </data>
  <data name="Audio" xml:space="preserve">
    <value>Audio</value>
  </data>
  <data name="DelayEasy3sec" xml:space="preserve">
    <value>Easy (3 sec / round)</value>
  </data>
  <data name="DelaysBetweenRounds" xml:space="preserve">
    <value>Delays between rounds</value>
  </data>
  <data name="DelayStandard2sec" xml:space="preserve">
    <value>Standard (2 sec / round)</value>
  </data>
  <data name="Difficulty" xml:space="preserve">
    <value>Difficulty</value>
  </data>
  <data name="Effects" xml:space="preserve">
    <value>Effects</value>
  </data>
  <data name="Tricks_FireCoal" xml:space="preserve">
    <value>A charcoal!</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="Music" xml:space="preserve">
    <value>Music</value>
  </data>
  <data name="TutorialBio" xml:space="preserve">
    <value>Pinch a Bio Element with two fingers to compress it!</value>
  </data>
  <data name="TutorialElectricity2" xml:space="preserve">
    <value>Connect two Electricity Elements by pressing them at the same time!</value>
  </data>
  <data name="TutorialElectricity3" xml:space="preserve">
    <value>Connect three Electricity Elements by pressing them at the same time!</value>
  </data>
  <data name="TutorialFire" xml:space="preserve">
    <value>Press once on a Fire Element to ignite it!</value>
  </data>
  <data name="TutorialGround" xml:space="preserve">
    <value>Double press a Ground Element to explode it!</value>
  </data>
  <data name="TutorialRoundNumber" xml:space="preserve">
    <value>At the top you can see the number of rounds in a level: there are three left!</value>
  </data>
  <data name="TutorialRoundTimer" xml:space="preserve">
    <value>At the bottom you can see the time allocated for a round: be careful, it will go faster!</value>
  </data>
  <data name="TutorialThreeElems" xml:space="preserve">
    <value>Be careful, there are three Elements ...</value>
  </data>
  <data name="TutorialTwoElems" xml:space="preserve">
    <value>Be careful, there are two Elements ...</value>
  </data>
  <data name="TutorialWater1" xml:space="preserve">
    <value>Move a Water element over one Fire Element to make it evaporate!</value>
  </data>
  <data name="TutorialWater2" xml:space="preserve">
    <value>Move an Ice element over two Fire Elements to make it evaporate!</value>
  </data>
  <data name="TutorialWind" xml:space="preserve">
    <value>Move a Wind Element to scramble it!</value>
  </data>
  <data name="Tricks" xml:space="preserve">
    <value>Tricks :</value>
  </data>
  <data name="Tricks_3ParchedGround" xml:space="preserve">
    <value>Three parched ground :(</value>
  </data>
  <data name="Tricks_5Kills" xml:space="preserve">
    <value>Mu-Mu-Mu-Mu-Multi-Kill !!!</value>
  </data>
  <data name="Tricks_NoFireForWater" xml:space="preserve">
    <value>Abandoned water :(</value>
  </data>
  <data name="Tricks_Wind5cm" xml:space="preserve">
    <value>Intense Wind ...</value>
  </data>
  <data name="Bio" xml:space="preserve">
    <value>Bio</value>
  </data>
  <data name="ElectricityDuo" xml:space="preserve">
    <value>Electricity Duo</value>
  </data>
  <data name="ElectricityTrio" xml:space="preserve">
    <value>Electricity Trio</value>
  </data>
  <data name="Fire" xml:space="preserve">
    <value>Fire</value>
  </data>
  <data name="Ground" xml:space="preserve">
    <value>Ground</value>
  </data>
  <data name="Ice" xml:space="preserve">
    <value>Ice</value>
  </data>
  <data name="Water" xml:space="preserve">
    <value>Water</value>
  </data>
  <data name="Wind" xml:space="preserve">
    <value>Wind</value>
  </data>
  <data name="UnlockedLevels" xml:space="preserve">
    <value>Levels unlocked on Standard will be automaticaly unlocked on Easy</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="ComingSoon" xml:space="preserve">
    <value>Coming soon ...</value>
  </data>
  <data name="Electricity" xml:space="preserve">
    <value>Electricity</value>
  </data>
  <data name="Elements" xml:space="preserve">
    <value>Elements</value>
  </data>
  <data name="Elems_FourDifferent" xml:space="preserve">
    <value>Four different</value>
  </data>
  <data name="Elems_ThreeDifferent" xml:space="preserve">
    <value>Three different</value>
  </data>
  <data name="Elems_TwoDifferent" xml:space="preserve">
    <value>Two different</value>
  </data>
  <data name="ElementCount1" xml:space="preserve">
    <value>Element of </value>
  </data>
  <data name="ElementCount2" xml:space="preserve">
    <value>Double Elements of </value>
  </data>
  <data name="ElementCount3" xml:space="preserve">
    <value>Triple Elements of </value>
  </data>
  <data name="ElementCount4" xml:space="preserve">
    <value>Quadruple Elements of </value>
  </data>
  <data name="ElementsPerRound" xml:space="preserve">
    <value>Elements per round</value>
  </data>
  <data name="Tricks_GroundWet" xml:space="preserve">
    <value>Wet ground???</value>
  </data>
  <data name="Tricks_4Pressed" xml:space="preserve">
    <value>press+press+press+press</value>
  </data>
  <data name="Tricks_PushTheGround" xml:space="preserve">
    <value>Push the ground!</value>
  </data>
  <data name="Tricks_SpeedFastWithWind" xml:space="preserve">
    <value>The SPEED is fast ~~~</value>
  </data>
  <data name="Tricks_CheckBox" xml:space="preserve">
    <value>Click on itself...</value>
  </data>
  <data name="PrivacyPolicy" xml:space="preserve">
    <value>Privacy policy</value>
  </data>
</root>